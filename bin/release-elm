#!/usr/bin/env ruby

# Run this script from the project root directory

LOG = "/tmp/release-elm.log"

dir = File.dirname(__FILE__)
load File.join(dir, "../lib/common.rb")

pwd = `pwd`.strip
app = pwd.strip.split("/").last
config = Config.load(app)
elm = config.elm
if elm.nil?
  Util.exit_with_error("No Elm config found for app '#{app}'")
end

release_dir = File.join("../", app + "-release")
if !Dir.exist?(release_dir)
  Util.exit_with_error("Release directory #{release_dir} does not exist") 
end

def run(cmd)
  File.open(LOG, "a") { |o| o << "\n#{cmd}" }
  Util.run(cmd + ">> #{LOG}")
  puts ""
end

# Turn elm.js -> elm.min.js
def add_suffix(filename, suffix)
  File.basename(filename, ".*") + ".#{suffix}" + File.extname(filename)
end

def ensure_elm_review
  if !File.exist?("review.sh")
    Util.exit_with_error("No review.sh script found")
  end

  puts "Running Elm Review"
  if !system("./review.sh")
    puts ""
    puts ""
    puts "Fix Elm Review Suggestions then release again"
    puts ""
    exit(1)
  end
end

def compile
  Util.assert_installed("elm")
  puts "Compiling"
  file = "elm.js"
  run "elm make src/Main.elm --optimize --output=#{file}"
  file
end

def rewrite_constants(file, rewrites)
  contents = IO.read(file)
  rewrites.each do |r|
    contents.gsub!(r.from, r.to)
  end
  file = add_suffix(file, "constants")
  File.open(file, "w") do |out|
    out << contents
  end
  file
end

def rewrite_version(file, version)
  puts "rewrite_version #{file} #{version}"
  tmp = []
  version_found = false
  IO.readlines(file).each do |l|
    if !version_found && md = l.strip.match(/^version\s*:\s*"([^"]+)"/)
      tmp << l.sub(md[1], version)
      version_found = true
    else
      tmp << l
    end
  end
  if !version_found
    raise "Failed to find version in #{file}"
  end
  File.open(file, "w") do |out|
    out << tmp.join("")
  end
  file
end

def minify(js)
  Util.assert_installed("uglifyjs")
  file = add_suffix(js, "min")
  run "uglifyjs #{js} --compress 'pure_funcs=[F2,F3,F4,F5,F6,F7,F8,F9,A2,A3,A4,A5,A6,A7,A8,A9],pure_getters,keep_fargs=false,unsafe_comps,unsafe' | uglifyjs --mangle --output #{file}"
  file
end

def extract_file(l, tag)
  if md = l.match(/#{tag}\s*=\s*\"([^\"]+)/)
    url = md[1]
    if url.match(/^\//)
      f = url[1..-1]
      if !File.exist?(f)
        raise "Failed to find file '#{f} from the following line in index.html:\n#{l}"

      end
      f
    else
      nil
    end
  else
    nil
  end
end

if File.exist?(LOG)
  File.delete(LOG)
end

def have_changes?
  diff = `git status --porcelain`.strip
  !diff.empty?
end

def write_to_file(path, contents)
  File.open(path, "w") { |out| out << contents }
end

ensure_elm_review
a = compile
tag = Tag.ask

puts a
b = rewrite_constants(a, elm.rewrites)
puts b
c = minify(b)
run "rm -f #{b}"
run "mv #{c} elm.js"

files = ["index.html"]
File.readlines("index.html").each do |l|
  if f = extract_file(l, "href")
    files << f
  end
  if f = extract_file(l, "src")
    files << f
  end
end

Dir.chdir(release_dir) do |dir|
  run "git rm -f *"
  run "git reset --hard"
  run "git clean -fdx"
  write_to_file("version.txt", tag)
  files.each do |f|
    run "cp #{File.join(pwd, f)} ."
  end
  ni = rewrite_constants("index.html", elm.rewrites)
  ni2 = rewrite_version(ni, File.read("version.txt").strip)
  run "rm -f index.html"
  run "mv #{ni2} index.html"
  run "git add #{files.join(" ")} version.txt"

  if have_changes?
    run "git commit -a -m 'Release version #{tag}'"
    run "git push"
    puts ""
    puts "#{app} Application Deployed"
  else
    puts ""
    puts "No changes to deploy"
  end
end

puts ""
