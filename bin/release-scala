#!/usr/bin/env ruby

# This script prepares and deploys a release for a specified application.
# Run this file from the project root directory using:
# ./bin/release-scala --app <app_name>

require_relative '../lib/common'
require 'fileutils'

class ReleaseManager
  attr_reader :app, :tag, :config, :tarfile

  def initialize(args)
    @app = args.fetch(:app)
    @tag = Tag.ask
    @config = Config.load(@app)
    @tarfile = "#{@app}-#{@tag}.tar.gz"
  end

  def run
    check_prepare_production_script
    create_release_file if should_create_release_file?
    deploy_release
  end

  private

  def check_prepare_production_script
    prepare_prod = File.join(__dir__, "prepare-production")
    unless File.exist?(prepare_prod)
      Util.exit_with_error("Cannot find prepare-production script. Looked in #{prepare_prod}")
    end
  end

  def should_create_release_file?
    return true unless File.exist?(@tarfile)

    puts "\nRelease file already exists [#{@tarfile}]."
    Ask.for_boolean("Overwrite?")
  end

  def create_release_file
    puts "\nCreating release for #{@app}: '#{@tag}'\n"
    Util.run("#{File.join(__dir__, 'prepare-production')} --app #{@app} --tag #{@tag}")

    unless File.exist?(@tarfile)
      Util.exit_with_error("Release file not found. Expected at #{@tarfile}")
    end

    puts "Release file ready: #{@tarfile}\n"
  end

  def deploy_release
    deploy_cmd = "cd ~/code/mbryzek/devops && ./bin/deploy --app #{@app} --file #{File.expand_path(@tarfile)}"
    puts "Starting deployment"
    puts deploy_cmd
    Util.run(deploy_cmd)
    puts
  end
end

args = Args.parse(ARGV, ["app"])
ReleaseManager.new(app: args.app).run
