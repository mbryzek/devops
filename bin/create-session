#!/usr/bin/env ruby

load File.join(File.dirname(__FILE__), '../lib/common.rb')
require 'net/http'
require 'uri'
require 'json'

def get_default_email
  begin
    email = `git config --get user.email`.strip
    return email unless email.empty?
  rescue
    # If git command fails, return nil
  end
  nil
end

def prompt_for_string(msg, opts={})
  default = opts.has_key?(:default) ? opts[:default].to_s.strip : nil
  prompt = default.nil? || msg.include?("[#{default}]")? msg : "#{msg} [#{default}]"
  hide_input = opts.has_key?(:hide_input) ? opts[:hide_input] : false
  value = ""
  while value.empty?
    STDERR.puts prompt
    system("stty -echo") if hide_input
    value = STDIN.gets
    system("stty echo") if hide_input
    value.strip!
    if value.empty? && default
      value = default
    end
  end
  value
end

def create_session(email, password)
  uri = URI('https://api.trueacumen.com/sessions/login')
  http = Net::HTTP.new(uri.host, uri.port)
  http.use_ssl = true

  request = Net::HTTP::Post.new(uri)
  request['Content-Type'] = 'application/json'
  request.body = {
    email: email,
    password: password
  }.to_json

  response = http.request(request)

  if response.code.to_i == 200 || response.code.to_i == 201
    begin
      json_response = JSON.parse(response.body)
      if json_response['session_id']
        return json_response['session_id']
      elsif json_response['id']
        return json_response['id']
      else
        STDERR.puts "Warning: Could not find session ID in response"
        return nil
      end
    rescue JSON::ParserError
      STDERR.puts "Warning: Could not parse JSON response"
      return nil
    end
  else
    STDERR.puts "Error: Login failed with status #{response.code}: #{response.body}"
    return nil
  end
end

# Get default email from git config
default_email = get_default_email

# Ask for email address
if default_email
  email = prompt_for_string("Enter email address:", default: default_email)
else
  email = prompt_for_string("Enter email address:")
end

# Ask for password
password = prompt_for_string("Enter password:", hide_input: true)

STDERR.puts ""
STDERR.puts "Creating session for #{email}..."
STDERR.puts ""

session_id = create_session(email, password)

if session_id
  puts session_id
else
  STDERR.puts ""
  STDERR.puts "âœ— Failed to create session"
  STDERR.puts ""
  exit 1
end
