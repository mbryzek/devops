#!/usr/bin/env ruby

load File.join(File.dirname(__FILE__), '../lib/common.rb')
require 'net/http'
require 'uri'
require 'json'
require 'optparse'

def get_default_email
  begin
    email = `git config --get user.email`.strip
    return email unless email.empty?
  rescue
    # If git command fails, return nil
  end
  nil
end

def create_session(email, password)
  uri = URI('https://api.trueacumen.com/sessions/login')
  http = Net::HTTP.new(uri.host, uri.port)
  http.use_ssl = true

  request = Net::HTTP::Post.new(uri)
  request['Content-Type'] = 'application/json'
  request.body = {
    email: email,
    password: password
  }.to_json

  response = http.request(request)

  if response.code.to_i == 200 || response.code.to_i == 201
    begin
      json_response = JSON.parse(response.body)
      if json_response['session_id']
        return json_response['session_id']
      elsif json_response['id']
        return json_response['id']
      else
        puts "Warning: Could not find session ID in response"
        return nil
      end
    rescue JSON::ParserError
      puts "Warning: Could not parse JSON response"
      return nil
    end
  else
    puts "Error: Login failed with status #{response.code}: #{response.body}"
    return nil
  end
end

# Parse command line options
output_file = nil
OptionParser.new do |opts|
  opts.banner = "Usage: create-session [options]"

  opts.on("-o", "--output-file FILE", "Write session ID to file") do |file|
    output_file = file
  end

  opts.on("-h", "--help", "Show this help") do
    puts opts
    exit
  end
end.parse!

# Get default email from git config
default_email = get_default_email

# Ask for email address
if default_email
  email = Ask.for_string("Enter email address:", default: default_email)
else
  email = Ask.for_string("Enter email address:")
end

# Ask for password
password = Ask.for_string("Enter password:", hide_input: true)

puts ""
puts "Creating session for #{email}..."
puts ""

session_id = create_session(email, password)

if session_id
  if output_file
    File.write(output_file, session_id)
    puts "Session ID written to #{output_file}"
  else
    puts session_id
  end
else
  puts ""
  puts "âœ— Failed to create session"
  puts ""
  exit 1
end
